<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.zeta.metaspace.web.dao.DataAssetsRetrievalDAO">
    <resultMap id="dataAssetsInfo" type="io.zeta.metaspace.model.dataassets.DataAssets">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="businessId" jdbcType="VARCHAR" property="businessId"/>
        <result column="businessName" jdbcType="VARCHAR" property="businessName"/>
        <result column="tenantid" jdbcType="VARCHAR" property="tenantId"/>
        <collection property="tags" column="{tableGuid=tableGuid, tenantId=tenantId}" notNullColumn="tableGuid"
                    select="io.zeta.metaspace.web.dao.TableTagDAO.getTable2Tag"/>
    </resultMap>

    <select id="searchAll" resultMap="dataAssetsInfo">
        SELECT count(*)over() total, t.* FROM
        (
        SELECT bi.businessid id, bi.name, bi.description,
        1 as type,
        (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH) AS
        (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT PATH FROM T WHERE guid=br.categoryguid
        ORDER BY PATH) businessPath,
        null technicalPath,
        null tableGuid, null businessId, null businessName, bi.tenantid,
        null important, null secret
        FROM businessinfo bi
        JOIN business_relation br ON br.businessid=bi.businessid
        WHERE 1=1
        <choose>
            <when test="isPublic==true">
                <if test="isGlobal==false">
                    AND
                    (
                    bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                    OR
                    (SELECT count(*) FROM business_2_group b2g
                    JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                    WHERE b2g.business_id=bi.businessid AND b2g.read=true
                    )>0
                    )
                </if>
            </when>
            <otherwise>
                AND bi.tenantid=#{tenantId}
                AND
                (
                bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                OR
                (SELECT count(*) FROM business_2_group b2g
                JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                WHERE b2g.business_id=bi.businessid AND b2g.read=true
                )>0
                )
            </otherwise>
        </choose>
        union
        SELECT ti.tableguid id, ti.tablename as name, ti.description,
        2 as type,
        (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH) AS
        (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT PATH FROM T WHERE guid=br.categoryguid
        ORDER BY PATH) businessPath,
        (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH) AS
        (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT PATH FROM T WHERE guid=si.category_id
        ORDER BY PATH) technicalPath,
        ti.tableguid tableGuid, bi.businessid businessId, bi.name businessName, bi.tenantid,
        CASE WHEN sidti.importance IS null THEN false ELSE sidti.importance END AS important,
        CASE WHEN sidti.security IS null THEN false ELSE sidti.security END AS secret
        FROM businessinfo bi
        JOIN business_relation br ON br.businessid=bi.businessid
        JOIN business2table b2t ON b2t.businessid=br.businessid
        JOIN tableinfo ti ON ti.tableguid=b2t.tableguid AND ti.status='ACTIVE'
        LEFT JOIN source_info si ON si.database_id=ti.databaseguid AND si.data_source_id=b2t.source_id AND si.version=0
        LEFT JOIN source_info_derive_table_info sidti ON sidti.table_guid=ti.tableguid AND sidti.version=-1
        WHERE 1=1
        <choose>
            <when test="isPublic==true">
                <if test="isGlobal==false">
                    AND
                    (
                    bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                    OR
                    (SELECT count(*) FROM business_2_group b2g
                    JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                    WHERE b2g.business_id=bi.businessid AND b2g.read=true
                    )>0
                    )
                </if>
            </when>
            <otherwise>
                AND bi.tenantid=#{tenantId}
                AND
                (
                bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                OR
                (SELECT count(*) FROM business_2_group b2g
                JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                WHERE b2g.business_id=bi.businessid AND b2g.read=true
                )>0
                )
            </otherwise>
        </choose>
        )t
        WHERE 1=1
        <if test="query!='' and query !=null">
            AND ((t.name like concat('%',#{query},'%') ESCAPE '/')
            OR (t.description like concat('%',#{query},'%') ESCAPE '/')
            OR (t.businessName like concat('%',#{query},'%') ESCAPE '/')
            )
        </if>
        ORDER BY name
        limit #{limit}
        offset #{offset}
    </select>

    <select id="searchBusinesses" resultMap="dataAssetsInfo">
        SELECT count(*)over() total, t.* FROM
        (SELECT bi.businessid id, bi.name, bi.description,
        1 as type,
        (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH) AS
        (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT PATH FROM T WHERE guid=br.categoryguid
        ORDER BY PATH) businessPath,
        null tableGuid, bi.tenantid
        FROM businessinfo bi
        JOIN business_relation br ON br.businessid=bi.businessid
        WHERE 1=1
        <choose>
            <when test="isPublic==true">
                <if test="isGlobal==false">
                    AND
                    (
                    bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                    OR
                    (SELECT count(*) FROM business_2_group b2g
                    JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                    WHERE b2g.business_id=bi.businessid AND b2g.read=true
                    )>0
                    )
                </if>
            </when>
            <otherwise>
                AND bi.tenantid=#{tenantId}
                AND
                (
                bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                OR
                (SELECT count(*) FROM business_2_group b2g
                JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                WHERE b2g.business_id=bi.businessid AND b2g.read=true
                )>0
                )
            </otherwise>
        </choose>
        )t
        WHERE 1=1
        <if test="query!='' and query !=null">
            AND ((t.name like concat('%',#{query},'%') ESCAPE '/')
            OR (t.description like concat('%',#{query},'%') ESCAPE '/')
            )
        </if>
        ORDER BY name
        limit #{limit}
        offset #{offset}
    </select>

    <select id="searchTables" resultMap="dataAssetsInfo">
        SELECT count(*)over() total, t.* FROM
        (SELECT ti.tableguid id, ti.tablename as name, ti.description,
        2 as type,
        (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH) AS
        (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT PATH FROM T WHERE guid=br.categoryguid
        ORDER BY PATH) businessPath,
        (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH) AS
        (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT PATH FROM T WHERE guid=si.category_id
        ORDER BY PATH) technicalPath,
        ti.tableguid tableGuid, bi.businessid businessId, bi.name businessName, bi.tenantid,
        CASE WHEN sidti.importance IS null THEN false ELSE sidti.importance END AS important,
        CASE WHEN sidti.security IS null THEN false ELSE sidti.security END AS secret
        FROM businessinfo bi
        JOIN business_relation br ON br.businessid=bi.businessid
        JOIN business2table b2t ON b2t.businessid=br.businessid
        JOIN tableinfo ti ON ti.tableguid=b2t.tableguid AND ti.status='ACTIVE'
        LEFT JOIN source_info si ON si.database_id=ti.databaseguid AND si.data_source_id=b2t.source_id AND si.version=0
        LEFT JOIN source_info_derive_table_info sidti ON sidti.table_guid=ti.tableguid AND sidti.version=-1
        WHERE 1=1
        <choose>
            <when test="isPublic==true">
                <if test="isGlobal==false">
                    AND
                    (
                    bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                    OR
                    (SELECT count(*) FROM business_2_group b2g
                    JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                    WHERE b2g.business_id=bi.businessid AND b2g.read=true
                    )>0
                    )
                </if>
            </when>
            <otherwise>
                AND bi.tenantid=#{tenantId}
                AND
                (
                bi.private_status='PUBLIC' OR (bi.submitter=#{userId} AND bi.submitter_read=true)
                OR
                (SELECT count(*) FROM business_2_group b2g
                JOIN user_group_relation ugr ON ugr.group_id = b2g.group_id AND ugr.user_id=#{userId}
                WHERE b2g.business_id=bi.businessid AND b2g.read=true
                )>0
                )
            </otherwise>
        </choose>
        )t
        WHERE 1=1
        <if test="query!='' and query !=null">
            AND ((t.name like concat('%',#{query},'%') ESCAPE '/')
            OR (t.description like concat('%',#{query},'%') ESCAPE '/')
            OR (t.businessName like concat('%',#{query},'%') ESCAPE '/')
            )
        </if>
        ORDER BY name
        limit #{limit}
        offset #{offset}
    </select>

    <select id="searchBusinessById" resultMap="dataAssetsInfo">
        SELECT bi.businessid id, bi.name, bi.description,
        1 as type,
       (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH)  AS
       (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=bi.tenantid
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=bi.tenantid)
        SELECT  PATH FROM T WHERE guid=br.categoryguid
        ORDER BY PATH) businessPath,
        bi.tenantid, null tableGuid
        FROM businessinfo bi
        JOIN business_relation br ON br.businessid=bi.businessid
        WHERE bi.businessid=#{businessId}
    </select>

    <select id="searchTableById" resultMap="dataAssetsInfo">
        SELECT ti.tableguid id, ti.tablename as name, ti.description,
        2 as type,
       (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH)  AS
       (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=#{tenantId}
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=#{tenantId})
        SELECT  PATH FROM T WHERE guid=br.categoryguid
        ORDER BY PATH) businessPath,
       (WITH RECURSIVE T(guid, name, parentCategoryGuid, PATH, DEPTH)  AS
       (SELECT guid,name,parentCategoryGuid, ARRAY[name] AS PATH, 1 AS DEPTH
        FROM category WHERE parentCategoryGuid IS NULL and tenantid=#{tenantId}
        UNION ALL
        SELECT D.guid, D.name, D.parentCategoryGuid, T.PATH || D.name, T.DEPTH + 1 AS DEPTH
        FROM category D JOIN T ON D.parentCategoryGuid = T.guid and D.tenantid=#{tenantId})
        SELECT  PATH FROM T WHERE guid=si.category_id
        ORDER BY PATH) technicalPath,
        #{tenantId} tenantid, ti.tableguid tableGuid, bi.businessid businessId, bi.name businessName,
        CASE WHEN sidti.importance IS null THEN false ELSE sidti.importance END AS important,
        CASE WHEN sidti.security IS null THEN false ELSE sidti.security END AS secret
        FROM tableinfo ti
        JOIN business2table b2t ON b2t.tableguid=ti.tableguid
        JOIN business_relation br ON br.businessid=b2t.businessid
        JOIN businessinfo bi ON bi.businessid=br.businessid
        LEFT JOIN source_info si ON si.database_id=ti.databaseguid AND si.data_source_id=b2t.source_id AND si.version=0
        LEFT JOIN source_info_derive_table_info sidti ON sidti.table_guid=ti.tableguid AND sidti.version=-1
        WHERE ti.tableguid=#{tableId} AND ti.status='ACTIVE' AND br.businessid=#{businessId}
    </select>

    <resultMap id="tableInfo" type="io.zeta.metaspace.model.dataassets.TableInfo">
        <result column="tableguid" jdbcType="VARCHAR" property="tableId"/>
        <result column="table_name_zh" jdbcType="VARCHAR" property="tableNameZh"/>
        <result column="tablename" jdbcType="VARCHAR" property="tableNameEn"/>
        <!--<result column="secret_period" jdbcType="VARCHAR" property="period"/>-->
        <result column="username" jdbcType="VARCHAR" property="creator"/>
        <result column="update_frequency" jdbcType="VARCHAR" property="updateFrequency"/>
        <association property="category" column="{guid=categoryGuid, tenantId=tenantId}" notNullColumn="guid"
                     select="io.zeta.metaspace.web.dao.CategoryDAO.queryPathByGuid"/>
        <collection property="tags" column="{tableGuid=tableGuid, tenantId=tenantId}" notNullColumn="tableGuid"
                    select="io.zeta.metaspace.web.dao.TableTagDAO.getTable2Tag"/>
    </resultMap>
    <select id="getTableInfos" resultMap="tableInfo">
        SELECT count(*)over() total, ti.tableguid, sidti.table_name_zh, ti.tablename,
        CASE WHEN sidti.importance IS null THEN false ELSE sidti.importance END AS important,
        CASE WHEN sidti.security IS null THEN false ELSE sidti.security END AS secret,
        u.username, sidti.update_frequency , sidti.category_id categoryGuid, #{tenantId} tenantId, ti.tableguid tableGuid
        FROM business2table b2t
        JOIN tableinfo ti ON ti.tableguid=b2t.tableguid AND ti.status='ACTIVE'
        LEFT JOIN source_info_derive_table_info sidti ON sidti.table_guid=ti.tableguid AND sidti.version = -1
        LEFT JOIN users u ON u.userid=sidti.creator
        WHERE b2t.businessid=#{businessId}
        limit #{limit}
        offset #{offset}
    </select>

    <resultMap id="columnInfo" type="io.zeta.metaspace.model.dataassets.ColumnInfo">
        <result column="column_guid" jdbcType="VARCHAR" property="columnId"/>
        <result column="column_name_zh" jdbcType="VARCHAR" property="columnNameZh"/>
        <result column="secret" jdbcType="BOOLEAN" property="secret"/>
        <result column="secret_period" jdbcType="VARCHAR" property="period"/>
        <result column="important" jdbcType="BOOLEAN" property="important"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <collection property="tags" column="{tenantId=tenantId, columnId=cid}" notNullColumn="cid"
                    select="io.zeta.metaspace.web.dao.ColumnTagDAO.getTagListByColumnId"/>
    </resultMap>
    <select id="getDeriveColumnInfo" resultMap="columnInfo">
        SELECT ci.column_guid, ci.column_guid cid, sidci.column_name_zh, sidci.secret, sidci.secret_period,
        sidci.important, sidci.remark, #{tenantId} tenantId
        FROM column_info ci
        LEFT JOIN source_info_derive_column_info sidci ON sidci.column_name_en=ci.column_name
        WHERE ci.column_guid in
        <foreach item="columnId" index="index" collection="columnIds" open="(" close=")" separator=",">
            #{columnId}
        </foreach>
        AND sidci.column_guid in
        (
        SELECT column_guid
        FROM source_info_derive_table_column_relation sidtcr
        JOIN source_info_derive_table_info sidti ON sidtcr.table_id=sidti.id AND sidti.table_guid=#{tableId} AND
        sidti.version=-1
        )
    </select>

    <select id="getTablePrivileges" resultType="io.zeta.metaspace.model.sourceinfo.derivetable.relation.GroupDeriveTableRelation">
        SELECT
        gtr.derive_table_id AS deriveTableId,
        gtr.user_group_id AS userGroupId,
        gtr.security_privilege AS securityPrivilege,
        gtr.importance_privilege AS importancePrivilege
        FROM group_table_relation gtr
        JOIN user_group ug ON ug.id=gtr.user_group_id
        JOIN user_group_relation ugr ON ugr.group_id=ug.id AND ugr.user_id=#{userId}
        WHERE gtr.derive_table_id in
        <foreach item="tableId" index="index" collection="tableIds" open="(" close=")" separator=",">
            #{tableId}
        </foreach>
        <if test="isPublic==false">
            ug.tenant=#{tenantId}
        </if>
    </select>

    <select id="getDomainCategory" resultType="io.zeta.metaspace.model.dataassets.DomainInfo">
        select c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as tenantName from category c
                                                                                                            left join tenant t on c.tenantid=t.id
        where c.level=1 and c.categorytype=1 order by c.tenantid
    </select>

    <select id="getThemeNumber" resultType="int">
        select count(*) from category
        where parentcategoryguid=#{guid}
    </select>

    <select id="getDomainCategoryByNotPublicUser" resultType="io.zeta.metaspace.model.dataassets.DomainInfo">
        select * from (
        select c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as tenantName,c.private_status from
        category c
        left join tenant t on c.tenantid=t.id
        where c.level=1 and c.categorytype=1 and c.private_status='PUBLIC'
        <if test='tenantId != null'>
            and c.tenantid=#{tenantId}
        </if>
        <if test='groupIdList != null and groupIdList.size() > 0'>
            union
            SELECT DISTINCT c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as
            tenantName,c.private_status from
            category c
            left join tenant t on c.tenantid=t.id
            INNER JOIN category_group_relation as relation on c.guid = relation.category_id
            WHERE c.level=1 and c.private_status = 'PRIVATE' AND c.categorytype =1
            <if test='tenantId != null'>
                AND c.tenantid=#{tenantId}
            </if>
            AND
            relation.group_id in
            <foreach item='item' index='index' collection='groupIdList' separator=',' open='(' close=')'>
                #{item}
            </foreach>
        </if>
        union
        SELECT DISTINCT c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as
        tenantName,c.private_status
        from category c
        left join tenant t on c.tenantid=t.id
        WHERE c.level=1 and c.private_status = 'PRIVATE' AND c.categorytype =1 and c.creator=#{userId}
        <if test='tenantId != null'>
            AND c.tenantid=#{tenantId}
        </if>
        ) temp order by temp.tenantId
    </select>

    <select id="getThemeByUserGroup" resultType="io.zeta.metaspace.model.dataassets.DomainInfo">
        select c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as tenantName,c.private_status from
        category c
        left join tenant t on c.tenantid=t.id
        where c.parentcategoryguid=#{guid} and c.private_status='PUBLIC'
        <if test='tenantId != null'>
            and c.tenantid=#{tenantId}
        </if>
        <if test='groupIdList != null and groupIdList.size() > 0'>
            union
            SELECT DISTINCT c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as
            tenantName,c.private_status from
            category c
            left join tenant t on c.tenantid=t.id
            INNER JOIN category_group_relation as relation on c.guid = relation.category_id
            WHERE c.parentcategoryguid=#{guid}
            <if test='tenantId != null'>
                AND c.tenantid=#{tenantId}
            </if>
            AND
            relation.group_id in
            <foreach item='item' index='index' collection='groupIdList' separator=',' open='(' close=')'>
                #{item}
            </foreach>
        </if>
        union
        SELECT DISTINCT c.guid as domainId,c.name as domainName,c.tenantid as tenantId,t.name as
        tenantName,c.private_status
        from category c
        left join tenant t on c.tenantid=t.id
        WHERE c.parentcategoryguid=#{guid} and c.creator=#{userId}
        <if test='tenantId != null'>
            AND c.tenantid=#{tenantId}
        </if>
    </select>

    <select id="getThemeCategory" resultType="io.zeta.metaspace.model.dataassets.ThemeInfo">
        select guid as themeId, name as themeName from category
        where parentcategoryguid=#{guid}
    </select>

    <select id="getBusinessId" resultType="java.lang.String">
        SELECT businessid FROM business_relation where categoryguid =#{guid}
    </select>

    <select id="getTableNumber" resultType="int">
        SELECT COUNT(tableguid) FROM business2table
        <if test='businessList != null and businessList.size() > 0'>
            where businessid in
            <foreach item='item' index='index' collection='businessList' separator=',' open='(' close=')'>
                #{item}
            </foreach>
        </if>
    </select>


    <select id="getBusinessCountByCategoryId" resultType="int">
        SELECT COUNT(tableguid) FROM business2table
        <if test='businessList != null and businessList.size() > 0'>
            where businessid in
            <foreach item='item' index='index' collection='businessList' separator=',' open='(' close=')'>
                #{item}
            </foreach>
        </if>
    </select>

    <select id="queryBusinessIdByUserGroup" resultType="java.lang.String">
        select bi.businessid
        from businessinfo bi
        join business_relation br on bi.businessid = br.businessid
        where br.categoryguid=#{categoryGuid}
        <if test='tenantId != null'>
            and bi.tenantid=#{tenantId}
        </if>
        and
        (bi.private_status='PUBLIC' or (bi.submitter=#{userId} and bi.submitter_read=true)
        or
        (select count(*) from business_2_group b2g
        join user_group_relation ugr on ugr.group_id = b2g.group_id and ugr.user_id=#{userId}
        where b2g.business_id=bi.businessid and b2g.read=true)>0
        )
    </select>

    <select id="queryBusiness" resultType="io.zeta.metaspace.model.dataassets.BussinessObject">
        select count(*)over()
        total, bi.businessid,bi.name,bi.owner,bi.manager,bi.maintainer,bi.businesslastupdate, u.username as businessoperator,'0' as status,bi.tenantid
        from businessinfo bi
        join business_relation br on bi.businessid = br.businessid
        left join users u on bi.businessoperator=u.userid
        where br.categoryguid=#{categoryGuid}
        order by bi.businesslastupdate desc
        <if test='limit!= -1'>
            limit #{limit}
        </if>
        offset #{offset}
    </select>


    <select id="queryBusinessByUserGroup" resultType="io.zeta.metaspace.model.dataassets.BussinessObject">
        select count(*)over()
        total,bi.businessid,bi.name,bi.owner,bi.manager,bi.maintainer,bi.businesslastupdate,u.username as
        businessoperator,'0' as status,bi.tenantid
        from businessinfo bi
        join business_relation br on bi.businessid = br.businessid
        left join users u on bi.businessoperator=u.userid
        where br.categoryguid=#{categoryGuid}
        <if test='tenantId != null'>
            and bi.tenantid=#{tenantId}
        </if>
        and
        (bi.private_status='PUBLIC' or (bi.submitter=#{userId} and bi.submitter_read=true)
        or
        (select count(*) from business_2_group b2g
        join user_group_relation ugr on ugr.group_id = b2g.group_id and ugr.user_id=#{userId}
        where b2g.business_id=bi.businessid and b2g.read=true)>0
        )
        order by bi.businesslastupdate desc
        <if test='limit!= -1'>
            limit #{limit}
        </if>
        offset #{offset}
    </select>

    <select id="queryCategoryInfo" resultType="org.apache.atlas.model.metadata.CategoryEntityV2">
        select  guid,name,description,qualifiedname from category where guid = #{guid}
    </select>

</mapper>